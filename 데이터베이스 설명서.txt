Branch Test용 수정이 어떤 알고리즘으로 이루어 지는가???
수정 수정 수정

Academy 데이터 베이스 

1. 데이터베이스 생성 
	
create database academy; 

//-------------------------------------------------------------

2. 회원 테이블 생성 (2019_08_30 회원 테이블 수정)

 
 drop table member; 
 
 후에 
 
 create table member(
 member_idx int primary key auto_increment,
 member_name varchar(10) not null,
 member_id varchar(20) not null unique,
 member_pass varchar(16) not null,
 member_jumin varchar(13) not null,
 member_email varchar(50) not null,
 member_postcode varchar(10) not null,
 member_add1 varchar(50) not null,
 member_add2 varchar(50) not null,
 member_phone varchar(13) not null,
 member_bank varchar(10) not null,
 member_accno varchar(16) not null,
 member_picture varchar(100) ,
 member_isMember varchar(1) not null,
 member_teacher_code varchar(5)
); 

로 실행  ( isMember = 0 이면 학생 / isMember=1 이면 교직원 admin은 isMember=2 줘서 구분)

insert into member values(1, 'admin', 'admin', 'admin', 'admin@admin.co.kr', '12345', 'busan', 'busan', '01012345678', '2', '1' );
insert into member values(null, 'admin1234', 'admin1234', 'admin1234','0001013412343', 'admin1234@admin.co.kr', '12345', 'busan', 'busan', '01012345678','bank','101501965321','no', '2', 'null');
insert into member values(3, 'student', 'student', 'student', 'student@admin.co.kr', '12345', 'busan', 'busan', '01012345678', '0', null );
insert into member values(null, 'teacher1', 'teacher1', 'teacher1','0001013412343', 'teacher1@admin.co.kr', '12345', 'busan', 'busan', '01012345678','bank','101501965321',null, '1', '1');
insert into member values(null, 'student', 'student', 'student','0001013412343', 'student@admin.co.kr', '12345', 'busan', 'busan', '01012345678','bank','101501965321',null, '0', null);
관리자 계정 추가.


//-------------------------------------------------------------



3. 공지사항(notice) 게시판 테이블 생성 (notice 테이블로 공지사항과 이벤트 모두를 처리함 => 별도의 event 테이블은 없음.)

Create table notice (
notice_idx int primary key auto_increment,
notice_subject varchar(30) not null,
notice_content varchar(500) not null,
notice_file varchar(100) ,
notice_date date,
event_start_day date,
event_end_day date,
isNotice int(1) not null
);

isNotice = 1 이면 공지
isNotice = 2 이면 이벤트



//-------------------------------------------------------------



4. notice 게시판에 "공지사항1" 내용 추가 

insert into notice values(
1, '공지1', '공지사항1 내용', '첨부파일1', '2019-08-01', null, null, 1);

insert into notice values(
null, '공지Test', '공지사항 내용', '첨부파일', '2019-08-01', null, null, 1); * 10회이상 시행(페이징 처리 확인을 위해)



//-------------------------------------------------------------




5. notice 게시판에 "이벤트1" 내용 추가 

insert into notice values(
2, '이벤트1', '이벤트1 내용', '첨부파일1' , '2019-08-01', '2019-08-01' , '2019-08-31', 2);



//-------------------------------------------------------------

6. 게시판 board 테이블 생성 

 drop table board; 후

CREATE TABLE `academy`.`board` (
  `board_num` INT(11) NOT NULL,
  `board_id' VARCHAR(10) NOT NULL,
  `board_sid' VARCHAR(10) NOT NULL,
  `board_subject` VARCHAR(45) NOT NULL,
  `board_content` VARCHAR(500) NOT NULL,
  `board_file` VARCHAR(45) NULL,
  `board_re_ref` INT(11) NULL,
  `board_re_lev` INT(11) NULL,
  `board_re_seq` INT(11) NULL,
  `board_issecret` INT(1) NOT NULL,
  `board_readcount` INT(11) NULL,
  `board_date` DATE NULL,
  `board_replyid' VARCHAR(10) NULL,
  PRIMARY KEY (`board_num`));
  
  위 SQL 구문이 실행되지 않을 경우 아래 구문 실행 
  
  create table board(
board_num int(11) not null primary key,
board_id varchar(10) not null,
board_sid varchar(10) not null,
board_subject varchar(45) not null,
board_content varchar(500) not null,
board_file varchar(45),
board_re_ref int(11),
board_re_lev int(11),
board_re_seq int(11),
board_issecret int(1) not null,
board_readcount int(11),
board_date date,
board_replyid varchar(10));


  
  7. 게시판 board 의 댓글 작성용 comment 테이블 생성 
  
  CREATE TABLE `academy`.`comment` (
  `comment_num` INT(11) NOT NULL  auto_increment,
  `board_num` INT(11) NOT NULL,
  `comment_sid` VARCHAR(10) NOT NULL,
  `comment` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`comment_num`));
  
  
  
  
 8. 수업 등록용 테이블 생성 및 기본 자료 등록 
 
 create table lecture (
lecture_idx int primary key auto_increment,
lecture_subject varchar(50) not null,
lecture_course varchar(10) not null,
lecture_teacher varchar(10) not null,
lecture_start_day date not null,
lecture_end_day date not null,
lecture_week_day varchar(20) not null,
lecture_content varchar(200) not null,
lecture_fee int(10) not null,
lecture_time varchar(2) not null,
lecture_room varchar(10) not null,
lecture_count int,
lecture_teacher_code varchar(5) not null

);

insert into lecture values(null, '자바 6개월 완성', 'Java', '가즈아', '2019-09-01', '2019-09-30',  '1', '6개월만 하면 취업 못해용', 990000, '오전', '1' ,1,'1');

 9. 수강 신청용 테이블 생성
 
 create table apply (
apply_idx int primary key auto_increment,
apply_member_id varchar(20) not null,
apply_lecture_idx int not null,
apply_purchase_date date,
apply_ischeck varchar(1) not null,
apply_review varchar(200) 
);

insert into apply values(null, 'student', 1, '2019-09-01', '0',null);
insert into apply values(null, 'student', 1, '2019-09-01', '1',null);
insert into apply values(null, 'student', 2, '2019-09-01', '1',null);

 10. 수강 후기 테이블 생성
 
 create table review (
review_idx int primary key auto_increment,
review_member_id varchar(20) not null,
review_lecture_idx int not null,
review_content varchar(200) not null
);

